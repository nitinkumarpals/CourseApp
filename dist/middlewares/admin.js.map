{"version":3,"sources":["../../src/middlewares/admin.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport jwt, { JwtPayload } from \"jsonwebtoken\";\n\nexport const adminMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.headers.authorization?.split(\" \")[1];\n    if (!token) {\n      throw new Error(\"Authorization token is missing or invalid\");\n    }\n    const decoded = jwt.verify(\n      token,\n      process.env.JWT_SECRET_ADMIN || \"\"\n    ) as JwtPayload;\n\n    if (decoded) {\n      req.adminId = decoded.id;\n      next();\n    } \n    else{\n      throw new Error(\"Invalid token payload or jwt secret\");\n    }\n  } catch (error) {\n    res.status(401).json({\n      success: false,\n      message: error instanceof Error ? error.message : \"Unauthorized\",\n    });\n  }\n};\n"],"mappings":";AACA,OAAO,SAAyB;AAEzB,IAAM,kBAAkB,OAC7B,KACA,KACA,SACG;AACH,MAAI;AACF,UAAM,QAAQ,IAAI,QAAQ,eAAe,MAAM,GAAG,EAAE,CAAC;AACrD,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AACA,UAAM,UAAU,IAAI;AAAA,MAClB;AAAA,MACA,QAAQ,IAAI,oBAAoB;AAAA,IAClC;AAEA,QAAI,SAAS;AACX,UAAI,UAAU,QAAQ;AACtB,WAAK;AAAA,IACP,OACI;AACF,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AAAA,EACF,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,MACT,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,CAAC;AAAA,EACH;AACF;","names":[]}