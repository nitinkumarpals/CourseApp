{"version":3,"sources":["../../src/middlewares/user.ts"],"sourcesContent":["import jwt, { JwtPayload } from \"jsonwebtoken\";\nimport { Request, Response, NextFunction } from \"express\";\ninterface RequestWithUserId extends Request {\n  userId: string;\n}\nconst middleware = async (\n  req: RequestWithUserId,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.headers.authorization?.split(\" \")[1];\n    if (!token) {\n      throw new Error(\"Authorization token is missing or invalid\");\n    }\n    const decoded = jwt.verify(\n      token,\n      process.env.JWT_SECRET || \"\"\n    ) as JwtPayload;\n    if (decoded) {\n      req.userId = decoded.id;\n      next();\n    } else {\n      throw new Error(\"Invalid token payload or jwt secret\");\n    }\n  } catch (error) {\n    res.status(401).json({\n      success: false,\n      message: error instanceof Error ? error.message : \"Unauthorized\",\n    });\n  }\n};\n"],"mappings":";AAAA,OAAO,SAAyB;","names":[]}