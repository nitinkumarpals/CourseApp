{"version":3,"sources":["../../../src/routes/course/course.ts","../../../src/db/db.ts","../../../src/middlewares/user.ts"],"sourcesContent":["import express from \"express\";\nimport { courseModel, purchaseModel, userModel } from \"../../db/db\";\nimport { userMiddleware } from \"../../middlewares/user\";\nexport const courseRouter = express.Router();\ncourseRouter.post(\"/purchase\", userMiddleware, async function (req, res) {\n  try {\n    const userId = req.userId;\n    const courseId = req.body.courseId;\n    // you would expect the user to pay you money\n    await purchaseModel.create({\n      userId,\n      courseId,\n    });\n    await userModel.findByIdAndUpdate(userId, {\n      $push: { courses: courseId },\n    });\n    res.json({\n      message: \"Course purchased successfully\",\n    });\n  } catch (error : Error | any) {\n    console.error(error);\n    res.status(500).json({\n      message: \"Error purchasing course\",\n      error: error.message,\n    });\n  }\n});\n\ncourseRouter.get(\"/\", async function (req, res) {\n  const courses = await courseModel.find();\n  res.status(200).json({\n    success: true,\n    message: \"Courses fetched successfully\",\n    courses: courses\n  })\n});\n","import mongoose, { Types } from \"mongoose\";\nconst ObjectId = Types.ObjectId;\nimport dotenv from \"dotenv\";\ndotenv.config();\nif (!process.env.MONGODB_URI) {\n  throw new Error(\"MONGODB_URI environment variable is not set\");\n}\nmongoose.connect(process.env.MONGODB_URI);\nimport { Schema } from \"mongoose\";\nconst userSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  firstName: String,\n  lastName: String,\n  courses: [ObjectId],\n});\n\nconst adminSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  firstName: String,\n  lastName: String,\n  courses: [ObjectId],\n});\n\nconst courseSchema = new Schema({\n  title: String,\n  description: String,\n  price: Number,\n  imageUrl: String,\n  creatorId: ObjectId,\n});\n\nconst purchaseSchema = new Schema({\n  userId: ObjectId,\n  courseId: ObjectId,\n});\n\nexport const userModel = mongoose.model(\"User\", userSchema);\nexport const adminModel = mongoose.model(\"Admin\", adminSchema);\nexport const courseModel = mongoose.model(\"Course\", courseSchema);\nexport const purchaseModel = mongoose.model(\"Purchase\", purchaseSchema);\n","import jwt, { JwtPayload } from \"jsonwebtoken\";\nimport { Request, Response, NextFunction } from \"express\";\n\nexport const userMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.headers.authorization?.split(\" \")[1];\n    if (!token) {\n      throw new Error(\"Authorization token is missing or invalid\");\n    }\n    const decoded = jwt.verify(\n      token,\n      process.env.JWT_SECRET || \"\"\n    ) as JwtPayload;\n    if (decoded) {\n      req.userId = decoded.id;\n      next();\n    } else {\n      throw new Error(\"Invalid token payload or jwt secret\");\n    }\n  } catch (error) {\n    res.status(401).json({\n      success: false,\n      message: error instanceof Error ? error.message : \"Unauthorized\",\n    });\n  }\n};\n"],"mappings":";AAAA,OAAO,aAAa;;;ACApB,OAAO,YAAY,aAAa;AAEhC,OAAO,YAAY;AAMnB,SAAS,cAAc;AAPvB,IAAM,WAAW,MAAM;AAEvB,OAAO,OAAO;AACd,IAAI,CAAC,QAAQ,IAAI,aAAa;AAC5B,QAAM,IAAI,MAAM,6CAA6C;AAC/D;AACA,SAAS,QAAQ,QAAQ,IAAI,WAAW;AAExC,IAAM,aAAa,IAAI,OAAO;AAAA,EAC5B,OAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,QAAQ,KAAK;AAAA,EACpD,UAAU,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,EACzC,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS,CAAC,QAAQ;AACpB,CAAC;AAED,IAAM,cAAc,IAAI,OAAO;AAAA,EAC7B,OAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,QAAQ,KAAK;AAAA,EACpD,UAAU,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,EACzC,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS,CAAC,QAAQ;AACpB,CAAC;AAED,IAAM,eAAe,IAAI,OAAO;AAAA,EAC9B,OAAO;AAAA,EACP,aAAa;AAAA,EACb,OAAO;AAAA,EACP,UAAU;AAAA,EACV,WAAW;AACb,CAAC;AAED,IAAM,iBAAiB,IAAI,OAAO;AAAA,EAChC,QAAQ;AAAA,EACR,UAAU;AACZ,CAAC;AAEM,IAAM,YAAY,SAAS,MAAM,QAAQ,UAAU;AACnD,IAAM,aAAa,SAAS,MAAM,SAAS,WAAW;AACtD,IAAM,cAAc,SAAS,MAAM,UAAU,YAAY;AACzD,IAAM,gBAAgB,SAAS,MAAM,YAAY,cAAc;;;ACzCtE,OAAO,SAAyB;AAGzB,IAAM,iBAAiB,OAC5B,KACA,KACA,SACG;AACH,MAAI;AACF,UAAM,QAAQ,IAAI,QAAQ,eAAe,MAAM,GAAG,EAAE,CAAC;AACrD,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AACA,UAAM,UAAU,IAAI;AAAA,MAClB;AAAA,MACA,QAAQ,IAAI,cAAc;AAAA,IAC5B;AACA,QAAI,SAAS;AACX,UAAI,SAAS,QAAQ;AACrB,WAAK;AAAA,IACP,OAAO;AACL,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AAAA,EACF,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,MACT,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,CAAC;AAAA,EACH;AACF;;;AF1BO,IAAM,eAAe,QAAQ,OAAO;AAC3C,aAAa,KAAK,aAAa,gBAAgB,eAAgB,KAAK,KAAK;AACvE,MAAI;AACF,UAAM,SAAS,IAAI;AACnB,UAAM,WAAW,IAAI,KAAK;AAE1B,UAAM,cAAc,OAAO;AAAA,MACzB;AAAA,MACA;AAAA,IACF,CAAC;AACD,UAAM,UAAU,kBAAkB,QAAQ;AAAA,MACxC,OAAO,EAAE,SAAS,SAAS;AAAA,IAC7B,CAAC;AACD,QAAI,KAAK;AAAA,MACP,SAAS;AAAA,IACX,CAAC;AAAA,EACH,SAAS,OAAqB;AAC5B,YAAQ,MAAM,KAAK;AACnB,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,MACT,OAAO,MAAM;AAAA,IACf,CAAC;AAAA,EACH;AACF,CAAC;AAED,aAAa,IAAI,KAAK,eAAgB,KAAK,KAAK;AAC9C,QAAM,UAAU,MAAM,YAAY,KAAK;AACvC,MAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IACnB,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA,EACF,CAAC;AACH,CAAC;","names":[]}