{"version":3,"sources":["../../../src/routes/user/user.ts","../../../src/db/db.ts","../../../src/schema/schema.ts","../../../src/middlewares/user.ts"],"sourcesContent":["import { Router } from \"express\";\nexport const userRouter = Router();\nimport { userModel, courseModel, purchaseModel } from \"../../db/db\";\nimport { signinSchema, signupSchema } from \"../../schema/schema\";\nimport jwt from \"jsonwebtoken\";\nimport { userMiddleware } from \"../../middlewares/user\";\n\nuserRouter.post(\"/signup\", async function (req, res) {\n  try {\n    const body = req.body;\n    const parsedBody = signupSchema.safeParse(body);\n    if (!parsedBody.success) {\n      return res.status(400).json({\n        success: false,\n        message:\n          \"Validation error: \" +\n          parsedBody.error.errors\n            .map((err) => `${err.path[0]} ${err.message}`)\n            .join(\", \"),\n      });\n    }\n    const { email, password, firstName, lastName } = parsedBody.data;\n    const user = await userModel.create({\n      email,\n      password,\n      firstName,\n      lastName,\n      courses: [],\n    });\n    const token = jwt.sign(\n      {\n        email: user.email,\n        id: user._id,\n      },\n      process.env.JWT_SECRET || \"\"\n    );\n    //do cookies\n    res.status(200).json({\n      user,\n      token: token,\n      message: \"user created successfully\",\n    });\n  } catch (error: Error | any) {\n    if (error instanceof Error && (error as any).code === 11000) {\n      // Unique constraint error code\n      return res.status(400).json({\n        success: false,\n        error: \"Email already exists\",\n        message: \"Email already in use\",\n      });\n    } else {\n      // Handle other errors\n      return res.status(500).json({\n        success: false,\n        error: error.message,\n        message: \"Internal server error\",\n      });\n    }\n  }\n});\n\nuserRouter.post(\"/signin\", async function (req, res) {\n  try {\n    const body = req.body;\n    const parsedBody = signinSchema.safeParse(body);\n    if (!parsedBody.success) {\n      return res.status(400).json({\n        success: false,\n        message:\n          \"Validation error: \" +\n          parsedBody.error.errors\n            .map((err) => `${err.path[0]} ${err.message}`)\n            .join(\", \"),\n      });\n    }\n    const { email, password } = parsedBody.data;\n    const user = await userModel.findOne({ email });\n    if (!user) {\n      return res.status(400).json({\n        success: false,\n        message: \"Invalid email or password\",\n      });\n    }\n    if (user.password !== password) {\n      return res.status(400).json({\n        success: false,\n        message: \"Invalid email or password\",\n      });\n    }\n\n    const token = jwt.sign(\n      {\n        email: user.email,\n        id: user._id,\n      },\n      process.env.JWT_SECRET || \"\"\n    );\n    //do cookies\n    return res.status(200).json({\n      success: true,\n      token: token,\n      message: \"Signin successful\",\n      user,\n    });\n  } catch (error: Error | any) {\n    return res.status(500).json({\n      success: false,\n      error: error.message,\n      message: \"Internal server error\",\n    });\n  }\n});\n\nuserRouter.get(\"/purchases\", userMiddleware, async function (req, res) {\n  try {\n    const userId = req.userId;\n    const purchases = await purchaseModel.find({ userId });\n    const courseIds = purchases.map((purchase) => purchase.courseId);\n    const courses = await courseModel.find({ _id: { $in: courseIds } });\n    res.status(200).json({ courses });\n  } catch (error: Error | any) {\n    res.status(500).json({\n      message: \"Error getting purchases\",\n      error: error.message,\n    });\n  }\n});\n","import mongoose, { Types } from \"mongoose\";\nconst ObjectId = Types.ObjectId;\nimport dotenv from \"dotenv\";\ndotenv.config();\nif (!process.env.MONGODB_URI) {\n  throw new Error(\"MONGODB_URI environment variable is not set\");\n}\nmongoose.connect(process.env.MONGODB_URI);\nimport { Schema } from \"mongoose\";\nconst userSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  firstName: String,\n  lastName: String,\n  courses: [ObjectId],\n});\n\nconst adminSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  firstName: String,\n  lastName: String,\n  courses: [ObjectId],\n});\n\nconst courseSchema = new Schema({\n  title: String,\n  description: String,\n  price: Number,\n  imageUrl: String,\n  creatorId: ObjectId,\n});\n\nconst purchaseSchema = new Schema({\n  userId: ObjectId,\n  courseId: ObjectId,\n});\n\nexport const userModel = mongoose.model(\"User\", userSchema);\nexport const adminModel = mongoose.model(\"Admin\", adminSchema);\nexport const courseModel = mongoose.model(\"Course\", courseSchema);\nexport const purchaseModel = mongoose.model(\"Purchase\", purchaseSchema);\n","import { z } from \"zod\";\n\nexport const signupSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n});\n\nexport const signinSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n});\n\nexport const courseSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  price: z.number(),\n  imageUrl: z.string().optional(),\n  creatorId: z.string().optional(),\n  courseId: z.string().optional(),\n});","import jwt, { JwtPayload } from \"jsonwebtoken\";\nimport { Request, Response, NextFunction } from \"express\";\n\nexport const userMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.headers.authorization?.split(\" \")[1];\n    if (!token) {\n      throw new Error(\"Authorization token is missing or invalid\");\n    }\n    const decoded = jwt.verify(\n      token,\n      process.env.JWT_SECRET || \"\"\n    ) as JwtPayload;\n    if (decoded) {\n      req.userId = decoded.id;\n      next();\n    } else {\n      throw new Error(\"Invalid token payload or jwt secret\");\n    }\n  } catch (error) {\n    res.status(401).json({\n      success: false,\n      message: error instanceof Error ? error.message : \"Unauthorized\",\n    });\n  }\n};\n"],"mappings":"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","names":["courseSchema","jwt","jwt"]}